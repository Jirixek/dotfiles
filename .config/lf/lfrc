# ===============
#  Basic Options
# ===============
set shell bash # Interpreter for shell commands (needs to be POSIX compatible)

set ratios 1:3:4 # Set ratios similar to ranger
set color256 on
set drawbox on
set scrolloff 4
set ifs "\n"
set findlen 2 # 0 is to search until matched
set ignoredia on
set smartdia on
set globsearch on
set tabstop 6 # Tabwidth
set preview true
set previewer ~/.config/lf/preview
set period 1 # Periodic loading
set incsearch on

# ===========
#  Functions
# ===========
cmd on-cd &{{
	# Display git repository status in your prompt
	. /usr/share/git/completion/git-prompt.sh
	GIT_PS1_SHOWDIRTYSTATE=1
	GIT_PS1_SHOWSTASHSTATE=1
	GIT_PS1_SHOWUNTRACKEDFILES=1
	GIT_PS1_SHOWUPSTREAM="auto verbose"

	git="$(__git_ps1 [%s])" || true
	PS1="\033[01;32m%u@%h \033[01;34m%w\033[0m\033[1m%f \033[01;33m$git"
	lf -remote "send $id set promptfmt \"$PS1\""
}}
on-cd # Ensure on-cd runs on startup

# Define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case $(file --mime-type "$f" -b) in
        text/*) "$EDITOR" $fx;;
        *) for f in $fx; do setsid $OPENER $f &> /dev/null & done;;
    esac
}}

cmd sudoerr &{{
	cmd="$1"
	shift

	IFS=" \n"
	for arg in "$@"
	do
		err="$(sudo $cmd "$arg" 2>&1)"
		[ $? -ne 0 ] && lf -remote "send $id echoerr $err" && exit
	done

	lf -remote "send $id reload"
}}

# ===================
#  File Manipulation
# ===================
cmd mkdir %{{
	printf 'Directory name: '
	read dirname
	mkdir "$dirname" && exit 0

	printf "Creation failed. Create with sudo? [y/N] "
	read -n1 ans
	[ "$ans" != 'y' ] && exit 0

	lf -remote "send $id sudoerr \"mkdir\" \"$dirname\""
}}

cmd touch %{{
	printf 'File name: '
	read filename
	touch "$filename" && exit 0

	printf 'Creation failed. Create with sudo? [y/N] '
	read -n1 ans
	[ "$ans" != 'y' ] && exit 0

	lf -remote "send $id sudoerr \"touch\" \"$filename\""
}}

cmd delete %{{
	set -f

	printf 'Delete? [y/N] '
	read ans
	[ "$ans" != 'y' ] && exit 0

	rm -rf $fx && exit 0

	printf 'Deletion failed. Delete with sudo? [y/N] '
	read ans
	[ "$ans" != 'y' ] && exit 0

	args="$(printf '%s\t' $fx)"
	IFS="\t"
	lf -remote "send $id sudoerr \"rm -rf\" $args"
}}

# ==========
#  Renaming
# ==========
cmd rename_clear_all &lf -remote "send $id :rename; cmd-delete-home"

cmd rename_clear &{{
	# Multiple files - bulkrename
	[ "$(echo "$fx" | grep -v '^$' | wc -l)" -gt 1 ] && {
		lf -remote "send $id rename_bulk"
		exit
	}

	# Single file
	[ -n "$fs" ] && file="$fs" || file="$f"
	if [ -f "$file" ]
	then
		# File
		filename="${file##*/}"      # Get basename of the selection
		extension="${filename##*.}" # Get extension only

		# If file doesn't have any extension, clear all
		[ "$extension" = "$filename" ] && \
			lf -remote "send $id rename_clear_all" && exit

		extension="$(printf '%q' "$extension")" # Escape bash sequences
		extension="${extension//\\ /<space>}"
		lf -remote "send $id :rename; cmd-delete-home"$'\n'"send $id push .$extension<home>"
	else
		# Other
		lf -remote "send $id rename_clear_all"
	fi
}}

cmd rename_edit &{{
	# Multiple files - bulkrename
	[ "$(echo "$fx" | grep -v '^$' | wc -l)" -gt 1 ] && {
		lf -remote "send $id rename_bulk"
		exit
	}

	# Single file
	[ -n "$fs" ] && file="$fs" || file="$f"
	if [ -f "$file" ]
	then
		# File
		filename="${file##*/}"      # Get basename of the selection
		extension="${filename##*.}" # Get extension only

		# If file doesn't have any extension, handle normally
		[ "$extension" = "$filename" ] && \
			lf -remote "send $id rename" && exit

		lefts="$(printf '%0.scmd-left; ' $(seq 0 "${#extension}"))"
		lf -remote "send $id :rename; $lefts"
	else
		# Other
		lf -remote "send $id rename"
	fi
}}

cmd rename_bulk ${{
	old="$(mktemp)"
	new="$(mktemp)"
	# [ -n $fs ] && fs=$(ls)
	printf "$fs\n" > "$old"
	printf "$fs\n" > "$new"
	"$EDITOR" "$new"
	[ "$(cat "$new" | wc -l)" -ne "$(cat "$old" | wc -l)" ] && exit
	paste "$old" "$new" | while read names
	do
		src=$(printf "$names" | cut -f1)
		dst=$(printf "$names" | cut -f2)
		[ "$src" = "$dst" ] && continue
		[ -e "$dst" ] && continue
		mv "$src" "$dst"
	done
	rm "$old" "$new"
	lf -remote "send $id unselect"
}}

cmd rename_front :rename; cmd-home

# ===============
#  Fuzzy finding
# ===============
cmd fzf_select &{{
	[ -d "$1" ] && cmd="cd" || cmd="select"
	lf -remote "send $id $cmd \"$1\""
}}

cmd fzf_find ${{
	res="$(find . -maxdepth 1 \( -type d -printf "%p/\n" \) -o -print | \
		tail +2 | cut -b3- | sort | fzf --height='100%')" || exit
	lf -remote "send $id fzf_select \"$res\""
}}

cmd fzf_locate ${{
	res="$(locate -r "^$PWD/" | \
		while read -r line
		do
			printf '%s%s\n' "$line" "$([ -d "$line" ] && printf '/')"
		done | \
		sed "s|${PWD}/||" | fzf --height='100%')" || exit
	lf -remote "send $id cd \"$(dirname "${PWD}/$res")\""$'\n'"send $id fzf_select \"$(basename "$res")\""
}}

# ==========
#  Movement
# ==========
cmd high %{{
}}

cmd middle %{{
}}

cmd low %{{
}}

# ========
#  Dragon
# ========
cmd dragon &{{
	if [ "$(echo "$fx" | wc -l)" -gt 1 ]
	then
		# Multiple files
		dragon-drag-and-drop $fx
	else
		# Single file
		dragon-drag-and-drop --and-exit $fx
	fi
}}

# =======
#  Trash
# =======
# TODO
# make sure trash folder exists
# %mkdir -p ~/.trash

# ==========
#  Resizing
# ==========
# TODO: hook
# cmd recol %{{
#     w=$(tput cols)
#     if [ $w -le 80 ]; then
#         lf -remote "send $id set ratios 1:2"
#     elif [ $w -le 160 ]; then
#         lf -remote "send $id set ratios 1:2:3"
#     else
#         lf -remote "send $id set ratios 1:2:3:5"
#     fi
# }}

# =================
#  Command mapping
# =================
# File manipulation
# TODO: listen to esc
map w
map wf touch
map wd mkdir
map D delete

# Renaming
map r
map re rename_edit
map rc rename_clear
map I  rename_front
map A  rename

# Fuzzy finding
map / fzf_locate
map f fzf_find

# Movement
map H high
map M middle
map L low

# Archives
map az $lf_zip "$id" $fx
map at $lf_tar "$id" $fx
map ag $lf_targz "$id" $fx
map ab $lf_tarbz2 "$id" $fx
map x  $extract $fx

map - dragon

# TODO: Trash
# map gtr cd ~/.local/share/Trash/files

# Other
map e $"$EDITOR" $fx
map i $~/.config/lf/preview $f | "$PAGER" -R
map <enter> open

# Command line
cmap <up> cmd-history-prev
cmap <down> cmd-history-next

# ===================
#  Directory mapping
# ===================
# Root
map gR  cd /
map ge  cd /etc/
map gH  cd /home/

map gm. cd /mnt/
map gmm cd /mnt/mrdky/
map gmM cd /mnt/mrdky/Movies/
map gmn cd /mnt/nas/
map gmw cd /mnt/windows/

map gr  %lf -remote "send $id cd /run/media/$USER/"

map gv. cd /var/
map gvl cd /var/lib/lxc/

# Home
map gh  cd ~/
map gc  cd ~/.config/

map gl. cd ~/.local/
map glb cd ~/.local/bin/
map glS cd ~/.local/src/
map gls cd ~/.local/suckless/
map gla cd ~/.local/share/Anki2/Jiri\ Szkandera/collection.media/

map gd. cd ~/Documents/
map gdc cd ~/Documents/cvut/
map gdf cd ~/Documents/faktury/
map gdl cd ~/Documents/latex/
map gdP cd ~/Documents/private/
map gdp cd ~/Documents/programming/

map gD  cd ~/Downloads/
map gM  cd ~/Music/
map gp. cd ~/Pictures/
map gps cd ~/Pictures/Screenshots/
map gpm cd ~/Pictures/Memes/
map gv  cd ~/Videos/
